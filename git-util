#!/usr/bin/env bash

#################################################################
#####                                                       #####
#####  Utilities for Git                                    #####
#####  A bash script                                        #####
#####  Created by Boyang XU                                 #####
#####                                                       #####
################################################################# 


#######################
### Main Functionalities


# Initial setups
function initialize {
    # bin utilities
    bin_dir=$( dirname "$(realpath "$0")" )
    # enable colors and utilities
    source "${bin_dir}/headers/colors.h"
    source "${bin_dir}/headers/utilities.h"
    # configuration files
    config_file="${bin_dir}/config"
    repo_aliases="${bin_dir}/.git-util_aliases"
    repo_ignore="${bin_dir}/.git-util_ignore"
    # Config Variables
    unset SEARCH_DIR DO_NOT_SEARCH_DIR
    if [ -f "$config_file" ] ; then source "$config_file" ; fi
    ## default: SEARCH_DIR=( "${HOME}" )
    ## default: DO_NOT_SEARCH_DIR=()
    ## default: AUTHOR_OR_CATEGORY="author"
    ## default: SORT_BY_CATEGORY="off"
    if ! (( "${#SEARCH_DIR[@]}" )) ; then SEARCH_DIR=( "${HOME}" ) ; fi
    if [ -z "$AUTHOR_OR_CATEGORY" ] || [ -z "$( echo "$CATEGORY_LIST" | sed 's/[[:space:]]//g' )" ] ; then AUTHOR_OR_CATEGORY="author" ; fi
    if [ -z "$SORT_BY_CATEGORY" ] ; then SORT_BY_CATEGORY="off" ; fi
}


function parsing_arg {
    if [ $# -eq 0 ] ; then
        warning "This command requires arguments."
        exit 1
    fi
    act=""
    case "$1" in
        info)
            act+=$'get-all-repo-info\n'
            ;;
        list)
            act+=$'list-all-repo\n'
            ;;
        sync|save)
			sync_type="$1"
            act+=$'sync-all-repo\n'
            ;;
        alias)
			act+=$'update-repo-aliases\n'
			;;
        ignore)
            act+=$'ignore-repo\n'
            shift
            ignore_repo=( "$@" )
            ;;
        ignore-reset)
            act+=$'reset-ignore\n'
            ;;
        *) echo "Option $1 not recognized" ;;
    esac
}


# rm-ignored-repo <file>
function rm-ignored-repo {
	input="$1"
	if [ -z "$input" ] ; then input="/dev/stdin" ; fi
	# ignore repos
    if [ -f "$repo_ignore" ] ; then
        cat "$input" | grep -vf "$repo_ignore"
    else
        cat "$input"
    fi
}


function ignore-repo {
    # test input
    if [ "${#ignore_repo[@]}" -eq 0 ] ; then 
        echo "Please enter what to ignore ..."
        return 1;
    fi
    # test existance of .git-util_ignore
    if [ ! -f "$repo_ignore" ] ; then touch "$repo_ignore" ; fi
    # write .git-util_ignore
    for i in "${!ignore_repo[@]}" ; do
        echo "${ignore_repo[i]}" >> "$repo_ignore"
    done
    # remove duplicates
    sort -u -o "$repo_ignore" "$repo_ignore"
}

function reset-ignore {
    if [ -f "$repo_ignore" ] ; then rm "$repo_ignore" ; fi
}


function get-repo-list {
	search_dir_pattern="$( printf "\"%s\" " "${SEARCH_DIR[@]}" )"
	if (( "${#DO_NOT_SEARCH_DIR[@]}" )) ; then
		do_not_search_dir_pattern="\( $(printf -- "-path \"%s\" -o " "${DO_NOT_SEARCH_DIR[@]}" | sed 's/-o $//') \) -prune -false -o"
	else
		do_not_search_dir_pattern=""
	fi
	readarray -t repodir < <( eval "find $search_dir_pattern -type d $do_not_search_dir_pattern -name \".git\" 2>&1" | grep -v "Permission denied" | sort -u | sed 's/\/.git$//g' | rm-ignored-repo )
	repo=( "${repodir[@]##*/}" )
}

function get-repo-category {
	unset repo_url
	unset repo_author
	unset repo_category
	for i in ${!repodir[@]} ; do
		# Get remote url
		repo_url[$i]="$( grep "url = " "${repodir[$i]}/.git/config" | awk 'NR==1{print $3}' )"
		# Get author
		case "${repo_url[$i]}" in
			git@github.com:*)
				repo_author[$i]="$( echo ${repo_url[$i]##*:} | awk -F '/' '{print $1}')"
				;;
			https://github.com/*)
				repo_author[$i]="$( echo ${repo_url[$i]%/*} | awk -F '/' '{print $NF}')"
				;;
			*)
				repo_author[$i]="others"
				;;
		esac
		# categorize
		case "$AUTHOR_OR_CATEGORY" in 
			Author)
				repo_category[$i]="${repo_author[$i]}"
				;;
			Category)
				repo_category[$i]="$( echo "$CATEGORY_LIST" | sed -r -e 's/^\s+//g' -e 's/\s+$//g' | awk -F ',' -v author="${repo_author[$i]}" '$1==author{print $2}' )"
				if [ -z "${repo_category[$i]}" ] ; then repo_category[$i]="others" ; fi
				;;
		esac
	done
}

function sort-repo-list {
	if [ "$SORT_BY_CATEGORY" = "on" ] ; then
		tmp_matrix=$(
			for i in ${!repodir[@]} ; do
				printf "%s,%s,%s\n" "${repo[$i]}" "${repo_category[$i]}" "${repodir[$i]}"
			done | sort -t ',' -k2
		)
		readarray -t repo < <( echo "$tmp_matrix" | awk -F ',' '{print $1}' )
		readarray -t repo_category < <( echo "$tmp_matrix" | awk -F ',' '{print $2}' )
		readarray -t repodir < <( echo "$tmp_matrix" | awk -F ',' '{print $3}' )
		unset tmp_matrix
	fi
}


function list-all-repo {
    get-repo-list
    get-repo-category
    sort-repo-list
    for i in "${!repo[@]}" ; do
        printf "%-25s %-15s ${dim}%-s${normal}\n" "${repo[$i]}" "${repo_category[$i]}" "${repodir[$i]}"
    done
}

function get-git-status {
    git_status_text=$( git status 2> /dev/null )
    # Branch info
    git_branch="$( head -1 .git/HEAD | awk -F '/' '{print $NF}' )"
    case "$git_branch" in 
    	master|main)
			git_branch_color="${dim}"
			;;
		*)
			git_branch_color="${yellow}"
			;;
    esac
    # Relative position with Origin
    git_origin_status=$( echo "$git_status_text" | sed -n -r '2s/.*Your branch is (ahead|behind) .*/\1/p')
    case "$git_origin_status" in 
        "") 
            git_origin_status="In sync" 
            git_origin_color="${dim}"
            ;;
        ahead) 
            git_origin_status="PUSH" 
            git_origin_color="${yellow}"     # need to push
            ;;
        behind) 
            git_origin_status="PULL" # need to pull
            git_origin_color="${red}"
            ;;
    esac
    # Modification Status
    if [ -n "$( echo "$git_status_text" | grep "^nothing to commit" )" ] ; then 
        git_change="No change"
        git_change_color="${dim}"
    else 
        git_change="Changed"
        git_change_color="${red}"
    fi
}

function get-all-repo-info {
    get-repo-list
    get-repo-category
    sort-repo-list
    echo ""
    printf "${bold}%-$(( $(tput cols) - 61 ))s %15s %20s%12s%12s${normal}\n" "Repository" "$AUTHOR_OR_CATEGORY" "Branch" "Remote" "Change"
    print-banner '-'
    for i in "${!repo[@]}" ; do
        # go to dir
        cd "${repodir[$i]}"
        # update remote info
        git remote update &>/dev/null
        # extract git status
        get-git-status
        # Print information
        printf "%-$(( $(tput cols) - 61 ))s %15s ${git_branch_color}%20s${git_origin_color}%12s${git_change_color}%12s${normal}\n" "${repo[$i]}" "${repo_category[$i]}" "${git_branch}" "${git_origin_status}" "${git_change}"
        # jump out of dir
        cd "${OLDPWD}"
    done
    echo ""
}

function sync-all-repo {
    echo ""
    get-repo-list
    for i in "${!repo[@]}" ; do
        # go to dir
        cd "${repodir[$i]}"
        # update remote info
        git remote update &>/dev/null
        # extract git status
        get-git-status
        # Do what is necessary
        case "${git_change}@${git_origin_status}" in
            "No change@PUSH")
                echo -e "${bold}${cyan}==> ${repo[$i]}${normal}: ${bold}${yellow}PUSHING ...${normal}"
                git push
                echo ""
                ;;
            "No change@PULL")
                echo -e "${bold}${cyan}==> ${repo[$i]}${normal}: ${bold}${red}PULLING ...${normal}"
                git pull
                echo ""
                ;;
            "No change@In sync")
                echo -e "${bold}${cyan}==> ${repo[$i]}${normal}: ${green}Everything is up to date.${normal}"
                echo ""
                ;;
            "Changed@In sync"|"Changed@PUSH")
				case "$sync_type" in 
					sync)
						echo -e "${bold}${cyan}==> ${repo[$i]}${normal}: ${red}There are uncommitted changes!${normal}"
		                echo ""
		                ;;
		            save)
		                echo -e "${bold}${cyan}==> ${repo[$i]}${normal}:"
		                echo -e "${red}Committing ...${normal}"
		                git add --all
		                git commit -m "quick save @ $(date)"
		                echo -e "${bold}${yellow}PUSHING ...${normal}"
		                git push
		                echo ""
		                ;;    
		        esac
		        ;;
            "Changed@PULL")
				case "$sync_type" in 
					sync)
						echo -e "${bold}${cyan}==> ${repo[$i]}${normal}: ${red}There are uncommitted changes!${normal}"
		                echo ""
		                ;;
		            save)
		                echo -e "${bold}${cyan}==> ${repo[$i]}${normal}:"
		                echo -e "${red}Possible conflict! Behind origin with uncommitted changes!${normal}"
		                echo ""
		                ;;    
		        esac
		        ;;              
        esac 
        # jump out of dir
        cd "${OLDPWD}"
    done
}

function update-repo-aliases {
	get-repo-list
	if [ -f "$repo_aliases" ] ; then rm "$repo_aliases" ; fi
	touch "$repo_aliases"
	echo "#!/usr/bin/env bash" > "$repo_aliases"
    echo "export GITUTIL_ALIASES=ON" >> "$repo_aliases"
	for i in "${!repo[@]}" ; do
		echo "alias cd]${repo[$i]}='cd \"${repodir[$i]}\" ; ls -l' " >> "$repo_aliases"
	done
	echo "Aliases UPDATED!"
    if [ -z "$(env | grep "GITUTIL_ALIASES=ON")" ] ; then
        echo ""
        echo "ATTENTION: .git-util_aliases file is not sourced in your bash profile!"
        echo "Please add the following line in your bash profile (e.g., ~/.bashrc):"
        echo "source \"${repo_aliases}\""
        echo ""
    fi
}

#######################
### Main program
initialize
parsing_arg "$@"
eval "$act"
